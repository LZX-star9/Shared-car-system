# Generated by Django 5.1.2 on 2024-10-24 12:31

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locationName', models.CharField(max_length=50)),
                ('locationAddress', models.CharField(max_length=100)),
                ('locationLat', models.FloatField()),
                ('locationLong', models.FloatField()),
                ('isAvailable', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=20, unique=True)),
                ('password', models.CharField(max_length=20)),
                ('surname', models.CharField(default='', max_length=20)),
                ('firstname', models.CharField(blank=True, max_length=20)),
                ('telephone', models.CharField(blank=True, max_length=20)),
                ('email', models.EmailField(max_length=254, null=True)),
                ('registrationDate', models.DateTimeField(auto_now_add=True, null=True)),
                ('userType', models.CharField(choices=[('CS', 'Customer'), ('OP', 'Operator'), ('MN', 'Manager')], default='CS', max_length=2)),
                ('isActive', models.BooleanField(default=True)),
                ('image_path', models.CharField(max_length=100, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicleLat', models.FloatField(null=True)),
                ('vehicleLong', models.FloatField(null=True)),
                ('charge', models.IntegerField(default=100)),
                ('needsRepair', models.BooleanField(default=False)),
                ('isParked', models.BooleanField(default=True)),
                ('lastLocation', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='system.location')),
            ],
        ),
        migrations.CreateModel(
            name='RepairLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('malfunctionType', models.CharField(choices=[('ER1', 'Motor'), ('ER2', 'Battery'), ('ER3', 'Electronics'), ('ER4', 'Cosmetic'), ('ER5', 'Brakes'), ('ER6', 'Direction'), ('ER7', 'Other')], default='Other', max_length=15)),
                ('reportDate', models.DateTimeField(auto_now_add=True, null=True)),
                ('description', models.CharField(max_length=100)),
                ('fixed', models.BooleanField(default=False)),
                ('repairDate', models.DateTimeField(null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='customer', to=settings.AUTH_USER_MODEL)),
                ('operator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='operator', to=settings.AUTH_USER_MODEL)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='system.vehicle')),
            ],
        ),
        migrations.CreateModel(
            name='RentLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('startDate', models.DateTimeField(auto_now_add=True, null=True)),
                ('endDate', models.DateTimeField(null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
                ('returnLocation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='system.location')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='system.vehicle')),
            ],
        ),
    ]
